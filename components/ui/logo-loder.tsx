"use client";

import React, { useState, useEffect } from "react";
import { cn } from "@/lib/utils";

interface LogoLoaderProps {
  size?: "sm" | "md" | "lg" | "xl";
  variant?: "default" | "pulse" | "rotate" | "morph" | "wave" | "flow";
  className?: string;
  showText?: boolean;
  text?: string;
  duration?: number;
}

export function LogoLoader({
  size = "md",
  variant = "default",
  className,
  showText = true,
  text = "Loading...",
  duration = 2000,
}: LogoLoaderProps) {
  const [progress, setProgress] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    setIsVisible(true);
    
    if (variant === "pulse" || variant === "morph" || variant === "flow") {
      const interval = setInterval(() => {
        setProgress((prev) => (prev + 1) % 100);
      }, duration / 100);
      
      return () => clearInterval(interval);
    }
  }, [variant, duration]);

  const sizeClasses = {
    sm: "w-8 h-8",
    md: "w-12 h-12",
    lg: "w-16 h-16",
    xl: "w-24 h-24",
  };

  const variantClasses = {
    default: "animate-pulse",
    pulse: "animate-pulse",
    rotate: "animate-spin",
    morph: "animate-pulse",
    wave: "animate-bounce",
    flow: "animate-pulse",
  };

  // Stylized "S" logo SVG paths
  const logoSVG = (
    <svg
      viewBox="0 0 1120 1120"
      xmlns="http://www.w3.org/2000/svg"
      className={cn(
        "w-full h-full transition-all duration-700 ease-in-out",
        variant === "morph" && "animate-pulse",
        variant === "wave" && "animate-bounce",
        variant === "flow" && "animate-pulse"
      )}
    >
      <defs>
        <linearGradient id="logoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor="#2563EB" stopOpacity="1">
            {variant === "morph" && (
              <animate
                attributeName="stop-opacity"
                values="1;0.5;1"
                dur={`${duration}ms`}
                repeatCount="indefinite"
              />
            )}
          </stop>
          <stop offset="100%" stopColor="#1D4ED8" stopOpacity="1">
            {variant === "morph" && (
              <animate
                attributeName="stop-opacity"
                values="1;0.5;1"
                dur={`${duration}ms`}
                repeatCount="indefinite"
              />
            )}
          </stop>
        </linearGradient>
        
        <filter id="glow">
          <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
          <feMerge> 
            <feMergeNode in="coloredBlur"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
      </defs>

      {/* Background circle for morph variant */}
      {variant === "morph" && (
        <circle
          cx="50"
          cy="50"
          r="45"
          fill="none"
          stroke="url(#logoGradient)"
          strokeWidth="2"
          strokeDasharray={`${progress * 2.83} ${283 - progress * 2.83}`}
          className="transition-all duration-300 ease-out"
          style={{ animationDuration: `${duration}ms` }}
        />
      )}

      {/* Actual Safety Shaper Logo */}
      <g filter="url(#glow)">
        {/* Main logo paths from file.svg */}
        <path
          fill={variant === "morph" ? "url(#logoGradient)" : "#2563EB"}
          opacity="1.000000"
          stroke="none"
          d="M1121.000000,384.000000 C1121.000000,629.972595 1121.000000,875.445251 1121.000000,1120.917847 C1120.860718,1120.945190 1120.721436,1120.996582 1120.582153,1120.996582 C747.457092,1121.000000 374.332062,1121.000000 1.000000,1121.000000 C1.000000,934.423218 1.000000,747.846313 1.000000,561.269470 C1.000000,374.623627 1.000000,187.977783 1.000000,1.165970 C374.333282,1.165970 747.666626,1.165970 1121.000000,1.165970 C1121.000000,128.528732 1121.000000,256.014374 1121.000000,384.000000 M285.305969,149.723923 C285.508942,149.599564 285.617371,149.418564 285.759949,148.394058 C285.830170,147.867203 285.900360,147.340332 286.503387,146.450607 C287.650787,144.619186 288.798218,142.787766 290.481842,140.546555 C294.957855,133.980301 299.283295,127.305191 303.938080,120.868225 C317.832489,101.654076 333.443695,84.030899 353.017212,70.376648 C359.123108,66.117271 366.018555,63.002796 372.260223,58.917614 C374.342407,57.554832 375.513641,54.800320 377.101318,52.682018 C374.779663,51.781918 372.403687,49.993374 370.145477,50.131351 C358.728271,50.828949 347.199951,51.230946 335.975830,53.227520 C316.589325,56.676033 297.285156,60.764809 278.167053,65.479500 C266.329010,68.398857 254.750320,72.578262 243.320892,76.895386 C227.720947,82.787773 212.153961,88.868187 196.994873,95.792000 C186.666016,100.509628 177.059296,106.808311 166.603760,112.613457 C157.864899,118.915924 148.982315,125.029961 140.418762,131.562256 C125.186775,143.181259 112.001877,157.052994 100.705109,172.338409 C87.115509,190.726227 75.059525,210.280960 66.897659,231.815308 C61.970505,244.815186 56.996689,257.944489 53.862617,271.438049 C50.271038,286.901367 47.692142,302.759430 46.538620,318.582001 C45.505302,332.755768 46.508667,347.148987 47.504585,361.383026 C48.975201,382.401733 53.725250,402.833435 62.461372,422.036469 C74.702446,448.943726 93.389702,471.140381 116.389366,489.296539 C132.584076,502.080841 149.900650,513.539551 167.304871,524.669800 C185.408966,536.247742 204.169342,546.807129 222.738007,557.648682 C238.732376,566.987183 254.793884,576.215332 270.945984,585.277832 C293.336792,597.840576 315.894928,610.105286 338.278198,622.681274 C356.333588,632.825684 374.254486,643.210327 392.201843,653.545959 C416.197174,667.364441 440.230835,681.118591 464.116821,695.124146 C486.138428,708.036499 508.044342,721.148865 529.896545,734.346497 C556.779297,750.582336 582.744507,768.125671 605.551208,789.897705 C620.690979,804.350525 632.263489,820.574768 632.490417,842.888672 C632.605713,854.224487 631.802368,865.044006 625.790833,874.935181 C623.296753,879.038757 620.711792,883.087280 617.650391,887.503601 C617.087891,888.330322 616.525452,889.156982 615.322693,890.205261 C613.923157,891.365845 612.480530,892.478699 611.130676,893.694458 C599.949646,903.764709 587.292053,911.637207 573.323730,916.963806 C556.225403,923.483948 538.579224,928.498657 520.131287,929.107910 C500.251099,929.764404 480.291260,930.829102 460.472687,929.753479 C439.808624,928.631958 419.589233,923.833130 399.914124,916.994568 C379.700287,909.968872 360.944672,900.217957 343.278320,888.241394 C329.071808,878.610352 315.992065,867.523987 304.951355,854.492737 C295.045471,842.801025 285.676208,830.433899 277.736816,817.353149 C268.013397,801.333191 261.711273,783.752502 257.459412,765.268616 C253.065918,746.169250 249.622452,726.982727 246.760193,707.631653 C246.368805,704.985535 244.051346,701.572510 241.700623,700.447632 C230.670227,695.169189 219.073090,691.054565 208.138565,685.601440 C193.819855,678.460693 179.267899,671.444153 166.036621,662.557251 C150.989792,652.450867 136.743652,640.955261 123.168648,628.914551 C111.462837,618.531677 101.372704,606.348755 90.214706,595.319336 C82.692551,587.883850 75.063126,580.369873 66.538239,574.193054 C59.306660,568.953308 51.282627,572.028259 47.829056,580.233215 C46.323692,583.809753 45.359875,587.887939 45.303455,591.755127 C44.990017,613.239136 45.005989,634.728210 44.971561,656.215759 C44.964634,660.537292 45.226879,664.859253 45.329693,669.828491 C45.380917,670.473938 45.432140,671.119324 45.276169,672.721619 C45.442787,677.412292 45.609402,682.102905 45.502880,687.449219 C45.669022,689.607117 45.835163,691.765015 46.113564,694.457642 C46.161114,694.633423 46.208660,694.809204 46.161819,695.901917 C46.496868,699.890686 46.831913,703.879517 47.318619,708.828918 C47.443600,709.464783 47.568584,710.100708 47.605473,711.322021 C47.743832,712.540527 47.882195,713.758972 48.099236,715.648804 C48.175663,716.092773 48.252090,716.536682 48.247375,717.816833 C48.513016,720.201233 48.778652,722.585632 49.077614,725.779358 C49.150082,726.855957 49.222553,727.932556 49.191170,729.763855 C49.447826,731.181213 49.704483,732.598572 50.096748,734.968445 C50.304001,736.883545 50.511253,738.798645 50.567539,741.157776 C50.701569,741.769531 50.835594,742.381348 50.950623,743.025818 C50.950623,743.025818 50.988461,743.036194 51.035141,743.910095 C51.129803,745.405212 51.077618,746.926758 51.341496,748.391418 C54.542343,766.157898 57.273739,784.030029 61.168911,801.644348 C65.135399,819.581055 69.371094,837.554993 75.119583,854.974426 C81.180672,873.341248 88.578415,891.336060 96.474144,909.010010 C105.288689,928.740601 117.470047,946.553345 130.449219,963.842041 C144.581726,982.667175 160.365143,999.948059 179.673859,1013.339844 C197.189270,1025.487793 215.424561,1036.744629 234.093460,1047.031494 C246.765427,1054.013916 260.616302,1058.947510 274.171204,1064.200684 C281.532410,1067.053589 289.377106,1068.658936 297.676544,1071.118530 C299.362000,1071.808960 300.988678,1072.784424 302.741943,1073.145874 C321.064484,1076.922485 339.314240,1081.185181 357.773468,1084.124512 C372.984741,1086.546631 388.420471,1088.047119 403.811279,1088.734253 C424.743622,1089.668823 445.790253,1090.564087 466.673004,1089.405762 C489.124420,1088.160400 511.507996,1084.970703 533.795471,1081.757446 C547.541992,1079.775635 561.200867,1076.720215 574.638062,1073.161377 C597.883484,1067.004517 620.426270,1058.720215 642.425598,1048.947388 C659.725830,1041.262085 676.301453,1032.194946 691.581482,1021.143860 C706.467773,1010.377563 720.521729,998.389404 732.150818,983.993469 C740.141541,974.101440 748.238831,964.184509 755.066650,953.497986 C760.908752,944.354248 766.221436,934.496155 769.582520,924.237854 C773.840820,911.241028 776.312805,897.597778 778.792908,884.093262 C782.895691,861.752441 782.463135,839.263000 777.135376,817.239197 C772.499084,798.074402 763.744507,780.640015 751.660339,764.812866 C738.767151,747.926208 723.974182,733.099121 707.308594,719.990601 C680.753540,699.103638 651.619751,682.160706 622.759155,664.859375 C602.300659,652.594849 581.049622,641.659668 560.291443,629.885803 C535.303589,615.713135 510.476593,601.257080 485.548370,586.978882 C480.108582,583.863098 474.535187,580.980774 468.638855,577.428162 C468.413361,577.183167 468.229156,576.871643 467.956543,576.702698 C449.519043,565.277405 430.915405,554.110352 412.685760,542.362915 C400.298279,534.380188 388.223114,525.869629 376.387787,517.083923 C360.456177,505.257385 344.521118,493.382904 329.264984,480.713196 C312.140717,466.492065 296.493652,450.586670 284.039429,432.047241 C276.396057,420.669220 270.080933,408.384460 263.397156,396.380035 C255.626389,382.423340 250.359619,367.478180 246.559616,351.457306 C246.302917,351.022980 246.046204,350.588623 245.712433,349.337677 C245.583130,348.808441 245.453842,348.279236 245.399109,347.004700 C244.491165,341.444885 243.051178,335.910614 242.782593,330.320068 C242.165161,317.468781 241.418091,304.556488 242.034561,291.731964 C242.661179,278.695953 244.244263,265.625183 246.547058,252.773682 C248.762329,240.410736 252.434494,228.308823 255.695999,215.357742 C255.788467,214.854034 255.880951,214.350311 256.426331,213.371536 C256.920837,211.913849 257.415375,210.456146 257.982544,208.976685 C257.982544,208.976685 257.993591,208.901642 258.272766,208.666077 C258.304352,208.333572 258.335968,208.001083 258.621307,206.856781 C260.942627,201.028412 263.089508,195.122986 265.623169,189.388412 C270.289185,178.827469 275.182526,168.366959 280.442352,157.503387 C281.118073,156.353195 281.793823,155.202988 282.740875,153.441360 C282.818176,153.232193 282.895447,153.023041 283.443390,152.463455 C283.915375,151.632263 284.387329,150.801056 284.957611,149.953262 C284.957611,149.953262 285.011139,149.869202 285.305969,149.723923"
          className={cn(
            "transition-all duration-1000 ease-in-out",
            variant === "pulse" && "animate-pulse",
            variant === "morph" && "animate-pulse",
            variant === "flow" && "animate-pulse"
          )}
        />
        
        {/* Additional logo paths for complete design */}
        <path
          fill={variant === "morph" ? "url(#logoGradient)" : "#004692"}
          opacity="1.000000"
          stroke="none"
          d="M537.055176,508.013489 C536.275879,507.664764 535.496521,507.316040 534.215942,506.643005 C531.765869,504.806824 529.966553,503.033203 527.845886,501.822449 C497.336426,484.403717 466.631561,467.321259 436.294159,449.609039 C415.651825,437.557159 396.219269,423.441406 380.311646,405.591461 C343.186584,363.933441 329.389648,314.960449 339.066193,260.034485 C347.259186,213.529282 371.777802,176.132324 406.771576,145.218643 C414.615540,138.289215 422.941620,131.905518 431.332336,125.130051 C432.434967,124.338127 433.251007,123.686737 434.043121,123.029556 C434.019165,123.023766 434.014801,123.072853 434.257507,123.006088 C435.110443,122.241257 435.720642,121.543198 436.336243,120.703384 C436.341644,120.561638 436.244537,120.295074 436.244537,120.295074 C436.244537,120.295074 436.275024,120.245071 436.616425,120.229614 C437.685577,119.551613 438.413300,118.889084 439.141052,118.226562 C439.141052,118.226570 439.146515,118.174210 439.441467,118.230820 C440.101471,118.268860 440.466461,118.250275 441.057587,118.221390 C441.883606,117.823341 442.483551,117.435585 443.057434,117.060738 C443.031403,117.073639 443.068878,117.120132 443.434204,117.059868 C445.466187,116.265251 447.230530,115.695282 448.784729,114.771713 C469.360352,102.544876 491.226746,93.296974 513.861877,85.586281 C552.493896,72.426247 592.437256,65.454239 632.884888,63.368225 C680.139099,60.931179 727.471497,61.935047 774.346375,70.568451 C818.067383,78.620972 860.023254,91.381645 899.073059,113.124931 C941.443542,136.717148 975.820190,168.697815 1001.800964,209.594589 C1021.334412,240.342484 1034.801270,273.824493 1045.040161,308.648621 C1054.921021,342.255188 1062.291992,376.426605 1067.551880,411.062439 C1073.855835,452.574860 1076.110107,494.222717 1071.743530,536.071411 C1070.864868,544.493225 1069.840576,553.023438 1067.604248,561.151733 C1064.035278,574.123291 1052.347778,576.910461 1042.757812,567.372864 C1036.625977,561.274536 1030.739990,554.872253 1025.267456,548.178101 C1006.298950,524.975037 985.493469,503.726562 960.540039,486.909363 C936.246399,470.536835 909.968079,457.957672 882.741333,447.320892 C877.177368,445.147217 873.544983,441.938416 872.464111,435.709229 C867.929016,409.575073 861.282654,383.986420 852.154602,359.052124 C837.615356,319.336853 815.101929,285.213806 780.792908,259.935150 C750.924194,237.928085 717.291931,224.538040 680.538635,218.788803 C652.008057,214.325836 623.474426,213.863342 594.895264,217.453461 C568.179565,220.809479 542.520935,227.610199 520.205444,243.568100 C510.571869,250.457108 501.419098,257.972717 495.576843,269.053101 C493.555542,272.513367 491.784607,275.758179 490.004395,279.000854 C489.995117,278.998779 490.007843,279.013580 489.783020,279.245239 C489.063690,280.652771 488.569153,281.828674 487.871613,283.290588 C481.957397,295.810120 480.646851,308.525421 483.994934,321.578156 C489.428162,342.759979 502.529907,358.930054 518.362244,373.228516 C537.162537,390.207367 558.616211,403.443481 580.454773,415.911072 C622.260681,439.777924 664.427063,463.014526 706.494385,486.421906 C755.549988,513.717712 804.883545,540.523071 853.668396,568.293213 C887.098755,587.323059 920.090454,607.168518 952.733948,627.522156 C979.791443,644.392822 1004.967285,663.827148 1026.407104,687.753601 C1050.178101,714.281677 1063.776123,745.437439 1068.795532,780.428345 C1073.125854,810.614807 1070.628662,840.514771 1064.373413,870.270874 C1056.032959,909.945862 1038.454346,945.113770 1012.529724,975.965881 C981.868103,1012.455383 943.062073,1037.789673 899.240540,1055.794189 C869.856567,1067.866821 839.423889,1076.546509 808.260071,1082.371948 C791.436707,1085.516724 774.318359,1087.139404 757.290710,1089.075806 C754.690308,1089.371460 751.859863,1087.643677 749.135864,1086.851929 C750.995667,1084.934448 752.532715,1082.439453 754.766357,1081.190552 C772.713379,1071.156738 788.645203,1058.489258 801.823914,1042.858521 C834.056030,1004.628845 855.611938,960.885681 866.842834,912.146912 C868.736755,903.927979 869.681519,895.490295 871.265991,886.851929 C872.279907,881.038635 873.092712,875.526978 873.953979,869.561768 C874.049561,865.530151 874.096741,861.952026 874.333679,858.031128 C874.394165,850.343994 874.264954,842.999573 874.166443,835.227905 C874.105225,832.203796 874.013306,829.607117 873.933411,826.556030 C871.698425,814.046570 870.114624,801.821350 867.074890,789.969543 C859.258179,759.491943 845.232849,731.849243 826.465881,706.692993 C820.638733,698.881775 813.612793,691.964905 806.978394,684.355347 C794.604553,669.634094 780.310791,657.464417 765.363586,645.992981 C730.955200,619.585632 694.182617,596.713196 656.911255,574.727112 C619.356873,552.574097 581.070312,531.661682 543.071594,510.264221 C541.228210,509.226135 539.067932,508.750854 537.055176,508.013489"
          className={cn(
            "transition-all duration-1000 ease-in-out",
            variant === "pulse" && "animate-pulse",
            variant === "morph" && "animate-pulse",
            variant === "flow" && "animate-pulse"
          )}
        />
      </g>

      {/* Flow animation overlay for flow variant */}
      {variant === "flow" && (
        <g>
          <path
            d="M20 20 Q30 15 40 20 Q50 25 60 20 Q70 15 80 20"
            fill="none"
            stroke="#60A5FA"
            strokeWidth="1"
            strokeDasharray="5,5"
            opacity="0.6"
          >
            <animate
              attributeName="stroke-dashoffset"
              values="0;10"
              dur="1s"
              repeatCount="indefinite"
            />
          </path>
          <path
            d="M20 80 Q30 85 40 80 Q50 75 60 80 Q70 85 80 80"
            fill="none"
            stroke="#60A5FA"
            strokeWidth="1"
            strokeDasharray="5,5"
            opacity="0.6"
          >
            <animate
              attributeName="stroke-dashoffset"
              values="10;0"
              dur="1s"
              repeatCount="indefinite"
            />
          </path>
        </g>
      )}
    </svg>
  );

  return (
    <div className={cn("flex flex-col items-center justify-center", className)}>
      <div className="relative">
        {/* Background glow effect */}
        <div className={cn(
          "absolute inset-0 rounded-full bg-gradient-to-r from-blue-600/20 to-blue-800/20 blur-xl",
          variant === "pulse" && "animate-pulse",
          variant === "morph" && "animate-pulse",
          variant === "flow" && "animate-pulse"
        )} />
        
        {/* Main logo container */}
        <div className={cn(
          "relative",
          sizeClasses[size],
          variantClasses[variant],
          "transition-all duration-500 ease-in-out",
          isVisible ? "opacity-100 scale-100" : "opacity-0 scale-95"
        )}>
          {logoSVG}
        </div>

        {/* Progress ring for morph variant */}
        {variant === "morph" && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="relative">
              <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="rgba(59, 130, 246, 0.2)"
                  strokeWidth="2"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="url(#logoGradient)"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeDasharray={`${progress * 2.83} ${283 - progress * 2.83}`}
                  className="transition-all duration-300 ease-out"
                />
              </svg>
            </div>
          </div>
        )}
      </div>

      {/* Loading text */}
      {showText && (
        <div className={cn(
          "mt-4 text-center transition-all duration-500 ease-in-out",
          isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-2"
        )}>
          <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
            {text}
          </p>
          {variant === "morph" && (
            <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">
              {progress}%
            </p>
          )}
        </div>
      )}
    </div>
  );
}

// Full screen loader component
export function FullScreenLoader({
  variant = "morph",
  text = "Loading Safety Shaper...",
  duration = 3000,
}: Omit<LogoLoaderProps, "size" | "showText">) {
  return (
    <div className="fixed inset-0 bg-gradient-to-br from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 z-50 flex items-center justify-center">
      <div className="text-center">
        <LogoLoader
          size="xl"
          variant={variant}
          text={text}
          duration={duration}
          showText={true}
        />
      </div>
    </div>
  );
}

// Inline loader component
export function InlineLoader({
  variant = "default",
  size = "sm",
  className,
}: Omit<LogoLoaderProps, "showText" | "text">) {
  return (
    <LogoLoader
      size={size}
      variant={variant}
      className={className}
      showText={false}
    />
  );
}

export default LogoLoader;
