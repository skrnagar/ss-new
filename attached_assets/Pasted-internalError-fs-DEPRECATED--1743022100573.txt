internalError/fs  DEPRECATED  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ The argument --apply is deprecated, it will be removed in the next major release. Use --write instead.
  

./app/auth/register/page.tsx:222:13 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ✖ JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    220 │           <h1 className="text-2xl font-semibold mb-2">Loading...</h1>
    221 │           <div className="h-2 w-64 bg-muted overflow-hidden rounded-full">
  > 222 │             <div className="h-full bg-primary animate-pulse rounded-full"></div>
        │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    223 │           </div>
    224 │         </div>
  
  ℹ Unsafe fix: Use a SelfClosingElement instead
  
    220 220 │             <h1 className="text-2xl font-semibold mb-2">Loading...</h1>
    221 221 │             <div className="h-2 w-64 bg-muted overflow-hidden rounded-full">
    222     │ - ············<div·className="h-full·bg-primary·animate-pulse·rounded-full"></div>
        222 │ + ············<div·className="h-full·bg-primary·animate-pulse·rounded-full"·/>
    223 223 │             </div>
    224 224 │           </div>
  

./components/user-activity.tsx:20:48 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
    19 │ export function UserActivity({ userId, isOwnProfile }: UserActivityProps) {
  > 20 │   const [activities, setActivities] = useState<any[]>([]);
       │                                                ^^^
    21 │   const [posts, setPosts] = useState<any[]>([]);
    22 │   const [loading, setLoading] = useState(true);
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./components/user-activity.tsx:21:38 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
    19 │ export function UserActivity({ userId, isOwnProfile }: UserActivityProps) {
    20 │   const [activities, setActivities] = useState<any[]>([]);
  > 21 │   const [posts, setPosts] = useState<any[]>([]);
       │                                      ^^^
    22 │   const [loading, setLoading] = useState(true);
    23 │   const router = useRouter();
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./components/user-activity.tsx:199:29 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Avoid using the index of an array as key property in an element.
  
    197 │               <div className="space-y-4">
    198 │                 {activities.map((activity, index) => (
  > 199 │                   <div key={index} className="border-b pb-3 last:border-b-0 last:pb-0">
        │                             ^^^^^
    200 │                     <div className="flex items-center gap-2 mb-1">
    201 │                       {activity.type === "comment" && (
  
  ℹ This is the source of the key value.
  
    196 │             ) : activities.length > 0 ? (
    197 │               <div className="space-y-4">
  > 198 │                 {activities.map((activity, index) => (
        │                                            ^^^^^
    199 │                   <div key={index} className="border-b pb-3 last:border-b-0 last:pb-0">
    200 │                     <div className="flex items-center gap-2 mb-1">
  
  ℹ The order of the items may change, and this also affects performances and component state.
  
  ℹ Check the React documentation. 
  

./app/compliance/page.tsx:205:77 lint/a11y/useSemanticElements ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ The elements with the following roles can be changed to the following elements:
    <button>
    <input type="button">
  
  
    203 │                 className="flex justify-between items-center cursor-pointer"
    204 │                 onClick={() => toggleSection(index)}
  > 205 │                 onKeyDown={(e) => e.key === "Enter" && toggleSection(index)}
        │                                                                             
  > 206 │                 role="button"
        │                 ^^^^^^^^^^^^^
    207 │                 tabIndex={0}
    208 │               >
  
  ℹ For examples and more information, see WAI-ARIA Roles
  

./app/compliance/page.tsx:283:34 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Avoid using the index of an array as key property in an element.
  
    281 │                     <tbody className="bg-white divide-y divide-gray-200">
    282 │                       {area.items.map((item, itemIndex) => (
  > 283 │                         <tr key={itemIndex}>
        │                                  ^^^^^^^^^
    284 │                           <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
    285 │                             {item.name}
  
  ℹ This is the source of the key value.
  
    280 │                     </thead>
    281 │                     <tbody className="bg-white divide-y divide-gray-200">
  > 282 │                       {area.items.map((item, itemIndex) => (
        │                                              ^^^^^^^^^
    283 │                         <tr key={itemIndex}>
    284 │                           <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
  
  ℹ The order of the items may change, and this also affects performances and component state.
  
  ℹ Check the React documentation. 
  

./app/components/hero-auth-buttons.tsx:50:9 lint/a11y/noSvgWithoutTitle ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Alternative text title element cannot be empty
  
    48 │         className="flex-1 flex items-center justify-center bg-[#0077B5] py-3 px-4 rounded-lg w-full text-white hover:bg-[#0077B5]/90 transition-colors h-auto"
    49 │       >
  > 50 │         <svg className="mr-2 h-5 w-5 text-white" fill="currentColor" viewBox="0 0 24 24">
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    51 │           <path d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"></path>
    52 │         </svg>
  
  ℹ For accessibility purposes, SVGs should have an alternative text, provided via title element. If the svg element has role="img", you should add the aria-label or aria-labelledby attribute.
  

./app/components/hero-auth-buttons.tsx:51:11 lint/style/useSelfClosingElements  FIXABLE  ━━━━━━━━━━━

  ✖ JSX elements without children should be marked as self-closing. In JSX, it is valid for any element to be self-closing.
  
    49 │       >
    50 │         <svg className="mr-2 h-5 w-5 text-white" fill="currentColor" viewBox="0 0 24 24">
  > 51 │           <path d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"></path>
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    52 │         </svg>
    53 │         Continue with LinkedIn
  
  ℹ Unsafe fix: Use a SelfClosingElement instead
  
    49 49 │         >
    50 50 │           <svg className="mr-2 h-5 w-5 text-white" fill="currentColor" viewBox="0 0 24 24">
    51    │ - ··········<path·d="M19·3a2·2·0·0·1·2·2v14a2·2·0·0·1-2·2H5a2·2·0·0·1-2-2V5a2·2·0·0·1·2-2h14m-.5·15.5v-5.3a3.26·3.26·0·0·0-3.26-3.26c-.85·0-1.84.52-2.32·1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4·1.39-1.4a1.4·1.4·0·0·1·1.4·1.4v4.93h2.79M6.88·8.56a1.68·1.68·0·0·0·1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69·1.69·0·0·0-1.69·1.69c0·.93.76·1.68·1.69·1.68m1.39·9.94v-8.37H5.5v8.37h2.77z"></path>
       51 │ + ··········<path·d="M19·3a2·2·0·0·1·2·2v14a2·2·0·0·1-2·2H5a2·2·0·0·1-2-2V5a2·2·0·0·1·2-2h14m-.5·15.5v-5.3a3.26·3.26·0·0·0-3.26-3.26c-.85·0-1.84.52-2.32·1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4·1.39-1.4a1.4·1.4·0·0·1·1.4·1.4v4.93h2.79M6.88·8.56a1.68·1.68·0·0·0·1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69·1.69·0·0·0-1.69·1.69c0·.93.76·1.68·1.69·1.68m1.39·9.94v-8.37H5.5v8.37h2.77z"·/>
    52 52 │           </svg>
    53 53 │           Continue with LinkedIn
  

./components/ui/use-toast.ts:96:9 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Prefer for...of instead of forEach.
  
     94 │         addToRemoveQueue(toastId);
     95 │       } else {
   > 96 │         state.toasts.forEach((toast) => {
        │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 97 │           addToRemoveQueue(toast.id);
   > 98 │         });
        │         ^^
     99 │       }
    100 │ 
  
  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./components/ui/use-toast.ts:133:3 lint/complexity/noForEach ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Prefer for...of instead of forEach.
  
    131 │ function dispatch(action: Action) {
    132 │   memoryState = reducer(memoryState, action);
  > 133 │   listeners.forEach((listener) => {
        │   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 134 │     listener(memoryState);
  > 135 │   });
        │   ^^
    136 │ }
    137 │ 
  
  ℹ forEach may lead to performance issues when working with large arrays. When combined with functions like filter or map, this causes multiple iterations over the same type.
  

./components/ui/use-toast.ts:172:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━

  ✖ This hook specifies more dependencies than necessary: state
  
    170 │   const [state, setState] = React.useState<State>(memoryState);
    171 │ 
  > 172 │   React.useEffect(() => {
        │         ^^^^^^^^^
    173 │     listeners.push(setState);
    174 │     return () => {
  
  ℹ This dependency can be removed from the list.
  
    178 │       }
    179 │     };
  > 180 │   }, [state]);
        │       ^^^^^
    181 │ 
    182 │   return {
  

./app/components/footer-cta.tsx:9:36 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
     8 │ export default function FooterCTA() {
   > 9 │   const [user, setUser] = useState<any>(null);
       │                                    ^^^
    10 │   const [loading, setLoading] = useState(true);
    11 │ 
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./app/components/profile-photo-modal.tsx:152:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
    150 │       // Refresh the page to show the updated avatar
    151 │       router.refresh();
  > 152 │     } catch (error: any) {
        │                     ^^^
    153 │       toast({
    154 │         title: "Error updating avatar",
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./app/components/profile-photo-modal.tsx:191:21 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
    189 │       // Refresh the page
    190 │       router.refresh();
  > 191 │     } catch (error: any) {
        │                     ^^^
    192 │       toast({
    193 │         title: "Error removing avatar",
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./app/components/profile-photo-modal.tsx:213:11 lint/a11y/useButtonType ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Provide an explicit type prop for the button element.
  
    211 │         <div className="flex items-center justify-between p-4 border-b">
    212 │           <h2 className="text-xl font-bold">Profile photo</h2>
  > 213 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
        │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    214 │             <X className="h-5 w-5" />
    215 │           </button>
  
  ℹ The default type of a button is submit, which causes the submission of a form when placed inside a `form` element. This is likely not the behaviour that you want inside a React application.
  
  ℹ Allowed button types are: submit, button or reset
  

./app/feed/page.tsx:75:38 lint/suspicious/noExplicitAny ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ⚠ Unexpected any. Specify a different type.
  
    74 │ export default function FeedPage() {
  > 75 │   const [posts, setPosts] = useState<any[]>([]);
       │                                      ^^^
    76 │   const [loading, setLoading] = useState(true);
    77 │   const { user, profile: userProfile, isLoading: authLoading, session } = useAuth();
  
  ℹ any disables many type checking rules. Its use should be avoided.
  

./app/feed/page.tsx:80:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ This hook specifies more dependencies than necessary: router
  
    78 │   const router = useRouter();
    79 │ 
  > 80 │   useEffect(() => {
       │   ^^^^^^^^^
    81 │     async function fetchPosts() {
    82 │       try {
  
  ℹ This dependency can be removed from the list.
  
    154 │       postsSubscription.unsubscribe();
    155 │     };
  > 156 │   }, [router]);
        │       ^^^^^^
    157 │ 
    158 │   return (
  

./app/feed/page.tsx:222:28 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Avoid using the index of an array as key property in an element.
  
    220 │               .fill(0)
    221 │               .map((_, index) => (
  > 222 │                 <Card key={index} className="mb-4">
        │                            ^^^^^
    223 │                   <CardContent className="pt-6">
    224 │                     <div className="flex items-start gap-3 mb-4">
  
  ℹ This is the source of the key value.
  
    219 │             Array(3)
    220 │               .fill(0)
  > 221 │               .map((_, index) => (
        │                        ^^^^^
    222 │                 <Card key={index} className="mb-4">
    223 │                   <CardContent className="pt-6">
  
  ℹ The order of the items may change, and this also affects performances and component state.
  
  ℹ Check the React documentation. 
  

./app/feed/page.tsx:363:31 lint/suspicious/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Avoid using the index of an array as key property in an element.
  
    361 │                 <div className="space-y-4">
    362 │                   {[1, 2, 3].map((_, index) => (
  > 363 │                     <div key={index} className="flex items-center justify-between">
        │                               ^^^^^
    364 │                       <div className="flex items-center gap-2">
    365 │                         <Skeleton className="h-8 w-8 rounded-full" />
  
  ℹ This is the source of the key value.
  
    360 │               {authLoading ? (
    361 │                 <div className="space-y-4">
  > 362 │                   {[1, 2, 3].map((_, index) => (
        │                                      ^^^^^
    363 │                     <div key={index} className="flex items-center justify-between">
    364 │                       <div className="flex items-center gap-2">
  
  ℹ The order of the items may change, and this also affects performances and component state.
  
  ℹ Check the React documentation. 
  

./app/groups/page.tsx:39:14 lint/style/noUnusedTemplateLiteral  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Do not use template literals if interpolation and special-character handling are not needed.
  
    37 │       posts: 87,
    38 │       lastActive: "2 hours ago",
  > 39 │       image: `https://placehold.co/400x200/1f2937/60a5fa?text=Group+1`,
       │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    40 │     },
    41 │     {
  
  ℹ Unsafe fix: Replace with string literal
  
     37  37 │         posts: 87,
     38  38 │         lastActive: "2 hours ago",
     39     │ - ······image:·`https://placehold.co/400x200/1f2937/60a5fa?text=Group+1`,
         39 │ + ······image:·"https://placehold.co/400x200/1f2937/60a5fa?text=Group+1",
     40  40 │       },
     41  41 │       {
  

Skipped 15 suggested fixes.
If you wish to apply the suggested (unsafe) fixes, use the command biome check --fix --unsafe

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 66.
Checked 91 files in 279ms. Fixed 1 file.
Found 58 errors.
Found 28 warnings.
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ✖ Some errors were emitted while applying fixes.
  