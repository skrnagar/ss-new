
Build Error
Failed to compile

Next.js (14.2.16) is outdated (learn more)
./app/components/profile-photo-modal.tsx
Error: 
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:1:1]
   1 │ "use client"
   2 │ 
   3 │ import { useState, useEffect, useRef } from "react"
     ·          ────┬───
     ·              ╰── previous definition of `useState` here
   4 │ import { useRouter } from "next/navigation"
   5 │ import { supabase } from "@/lib/supabase"
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
     ·                 ────┬───
     ·                     ╰── `useState` redefined here
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
     ╰────

  × the name `X` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:7:1]
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
     ·          ┬
     ·          ╰── previous definition of `X` here
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
     ·          ┬
     ·          ╰── `X` redefined here
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
     ╰────

  × the name `Button` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:5:1]
   5 │ import { supabase } from "@/lib/supabase"
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
   8 │ import { Button } from "@/components/ui/button"
     ·          ───┬──
     ·             ╰── previous definition of `Button` here
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
     ·          ───┬──
     ·             ╰── `Button` redefined here
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
 335 │ import { Slider } from "@/components/ui/slider"
 336 │ import { createClient } from "@/lib/supabase"
     ╰────

  × the name `Avatar` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:4:1]
   4 │ import { useRouter } from "next/navigation"
   5 │ import { supabase } from "@/lib/supabase"
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
     ·          ───┬──
     ·             ╰── previous definition of `Avatar` here
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
     ·          ───┬──
     ·             ╰── `Avatar` redefined here
 335 │ import { Slider } from "@/components/ui/slider"
 336 │ import { createClient } from "@/lib/supabase"
     ╰────

  × the name `AvatarImage` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:4:1]
   4 │ import { useRouter } from "next/navigation"
   5 │ import { supabase } from "@/lib/supabase"
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
     ·                                  ─────┬─────
     ·                                       ╰── previous definition of `AvatarImage` here
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
     ·                  ─────┬─────
     ·                       ╰── `AvatarImage` redefined here
 335 │ import { Slider } from "@/components/ui/slider"
 336 │ import { createClient } from "@/lib/supabase"
     ╰────

  × the name `AvatarFallback` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:4:1]
   4 │ import { useRouter } from "next/navigation"
   5 │ import { supabase } from "@/lib/supabase"
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
     ·                  ───────┬──────
     ·                         ╰── previous definition of `AvatarFallback` here
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
     ·                               ───────┬──────
     ·                                      ╰── `AvatarFallback` redefined here
 335 │ import { Slider } from "@/components/ui/slider"
 336 │ import { createClient } from "@/lib/supabase"
     ╰────

  × the name `Slider` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:6:1]
   6 │ import { useToast } from "@/hooks/use-toast"
   7 │ import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
   8 │ import { Button } from "@/components/ui/button"
   9 │ import { Slider } from "@/components/ui/slider"
     ·          ───┬──
     ·             ╰── previous definition of `Slider` here
  10 │ import { X, Upload, Eye, RotateCcw, RotateCw } from "lucide-react"
  11 │ 
  12 │ interface ProfilePhotoModalProps {
  13 │   userId: string
  14 │   avatarUrl: string | null
  15 │   name: string
  16 │   isOpen: boolean
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
 335 │ import { Slider } from "@/components/ui/slider"
     ·          ───┬──
     ·             ╰── `Slider` redefined here
 336 │ import { createClient } from "@/lib/supabase"
 337 │ 
 338 │ interface ProfilePhotoModalProps {
     ╰────

  × the name `ProfilePhotoModal` is defined multiple times
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:17:1]
  17 │   onClose: () => void
  18 │ }
  19 │ 
  20 │ export function ProfilePhotoModal({ userId, avatarUrl, name, isOpen, onClose }: ProfilePhotoModalProps) {
     ·                 ────────┬────────
     ·                         ╰── previous definition of `ProfilePhotoModal` here
  21 │   const [loading, setLoading] = useState(false)
  22 │   const [selectedFile, setSelectedFile] = useState<File | null>(null)
  23 │   const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  24 │   const [activeTab, setActiveTab] = useState("crop")
  25 │   const [zoom, setZoom] = useState(50)
  26 │   const [straighten, setStraighten] = useState(50)
  27 │   const [brightness, setBrightness] = useState(50)
  28 │   const [contrast, setContrast] = useState(50)
  29 │ 
  30 │   const fileInputRef = useRef<HTMLInputElement>(null)
  31 │   const { toast } = useToast()
  32 │   const router = useRouter()
  33 │   const modalRef = useRef<HTMLDivElement>(null)
  34 │ 
  35 │   // Get initials for avatar fallback
  36 │   const getInitials = (name: string) => {
  37 │     if (!name) return 'U'
  38 │     return name
  39 │       .split(' ')
  40 │       .map(part => part?.[0] || '')
  41 │       .join('')
  42 │       .toUpperCase()
  43 │       .substring(0, 2)
  44 │   }
  45 │ 
  46 │   // Reset editing state when modal opens or closes
  47 │   useEffect(() => {
  48 │     if (!isOpen) {
  49 │       setSelectedFile(null)
  50 │       setPreviewUrl(null)
  51 │       setActiveTab("crop")
  52 │       setZoom(50)
  53 │       setStraighten(50)
  54 │       setBrightness(50)
  55 │       setContrast(50)
  56 │     }
  57 │   }, [isOpen])
  58 │ 
  59 │   // Set up click outside to close
  60 │   useEffect(() => {
  61 │     const handleClickOutside = (event: MouseEvent) => {
  62 │       if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
  63 │         onClose()
  64 │       }
  65 │     }
  66 │ 
  67 │     if (isOpen) {
  68 │       document.addEventListener('mousedown', handleClickOutside)
  69 │     }
  70 │ 
  71 │     return () => {
  72 │       document.removeEventListener('mousedown', handleClickOutside)
  73 │     }
  74 │   }, [isOpen, onClose])
  75 │ 
  76 │   // Handle file selection
  77 │   const handleFileSelect = () => {
  78 │     fileInputRef.current?.click()
  79 │   }
  80 │ 
  81 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  82 │     const file = e.target.files?.[0]
  83 │     if (file) {
  84 │       setSelectedFile(file)
  85 │       const objectUrl = URL.createObjectURL(file)
  86 │       setPreviewUrl(objectUrl)
  87 │     }
  88 │   }
  89 │ 
  90 │   // Apply CSS filters based on slider values
  91 │   const getImageStyles = () => {
  92 │     return {
  93 │       transform: `rotate(${(straighten - 50) * 0.06}deg) scale(${zoom / 50})`,
  94 │       filter: `brightness(${brightness / 50}) contrast(${contrast / 50})`,
  95 │       transition: 'transform 0.2s, filter 0.2s',
  96 │     }
  97 │   }
  98 │ 
  99 │   // Handle save photo
 100 │   const handleSavePhoto = async () => {
 101 │     if (!selectedFile) return
 102 │ 
 103 │     setLoading(true)
 104 │ 
 105 │     try {
 106 │       // Upload file to Supabase Storage
 107 │       const fileExt = selectedFile.name.split('.').pop()
 108 │       const fileName = `${userId}-${Date.now()}.${fileExt}`
 109 │ 
 110 │       const { error: uploadError, data: uploadData } = await supabase.storage
 111 │         .from('avatars')
 112 │         .upload(fileName, selectedFile, {
 113 │           upsert: true,
 114 │         })
 115 │ 
 116 │       if (uploadError) throw uploadError
 117 │ 
 118 │       // Get public URL
 119 │       const { data: urlData } = supabase.storage
 120 │         .from('avatars')
 121 │         .getPublicUrl(fileName)
 122 │ 
 123 │       // Update user profile with new avatar URL
 124 │       const { error: updateError } = await supabase
 125 │         .from('profiles')
 126 │         .update({ 
 127 │           avatar_url: urlData.publicUrl,
 128 │           updated_at: new Date().toISOString()
 129 │         })
 130 │         .eq('id', userId)
 131 │ 
 132 │       if (updateError) throw updateError
 133 │ 
 134 │       toast({
 135 │         title: "Profile photo updated",
 136 │         description: "Your profile photo has been updated successfully",
 137 │       })
 138 │ 
 139 │       // Close modal and refresh
 140 │       onClose()
 141 │       router.refresh()
 142 │ 
 143 │     } catch (error: any) {
 144 │       toast({
 145 │         title: "Error updating photo",
 146 │         description: error.message,
 147 │         variant: "destructive",
 148 │       })
 149 │     } finally {
 150 │       setLoading(false)
 151 │     }
 152 │   }
 153 │ 
 154 │   if (!isOpen) return null
 155 │ 
 156 │   return (
 157 │     <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4">
 158 │       <div 
 159 │         ref={modalRef} 
 160 │         className="bg-background rounded-lg shadow-lg max-w-4xl w-full overflow-hidden"
 161 │       >
 162 │         {/* Modal Header */}
 163 │         <div className="flex items-center justify-between p-4 border-b">
 164 │           <h2 className="text-xl font-bold">Edit photo</h2>
 165 │           <button onClick={onClose} className="text-muted-foreground hover:text-foreground">
 166 │             <X className="h-5 w-5" />
 167 │           </button>
 168 │         </div>
 169 │ 
 170 │         {/* Modal Content */}
 171 │         <div className="flex flex-col md:flex-row h-[calc(100vh-200px)] max-h-[600px]">
 172 │           {/* Preview Area */}
 173 │           <div className="flex-1 bg-muted flex items-center justify-center p-4 overflow-hidden">
 174 │             {previewUrl ? (
 175 │               <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
 176 │                 {/* Photo Preview with applied styles */}
 177 │                 <div className="relative w-80 h-80 overflow-hidden rounded-full border-2 border-white/20">
 178 │                   <img
 179 │                     src={previewUrl}
 180 │                     alt="Preview"
 181 │                     className="absolute inset-0 w-full h-full object-cover"
 182 │                     style={getImageStyles()}
 183 │                   />
 184 │                 </div>
 185 │               </div>
 186 │             ) : (
 187 │               <div className="flex flex-col items-center justify-center h-full">
 188 │                 <Avatar className="h-24 w-24 mb-4">
 189 │                   <AvatarImage src={avatarUrl || "/placeholder-user.jpg"} alt={name} />
 190 │                   <AvatarFallback>{getInitials(name)}</AvatarFallback>
 191 │                 </Avatar>
 192 │ 
 193 │                 <input
 194 │                   type="file"
 195 │                   ref={fileInputRef}
 196 │                   className="hidden"
 197 │                   accept="image/*"
 198 │                   onChange={handleFileChange}
 199 │                 />
 200 │ 
 201 │                 <Button onClick={handleFileSelect} className="mt-4">
 202 │                   <Upload className="h-4 w-4 mr-2" />
 203 │                   Upload Photo
 204 │                 </Button>
 205 │               </div>
 206 │             )}
 207 │           </div>
 208 │ 
 209 │           {/* Controls Area */}
 210 │           <div className="w-full md:w-80 border-t md:border-t-0 md:border-l">
 211 │             {previewUrl && (
 212 │               <div className="p-4">
 213 │                 {/* Tabs */}
 214 │                 <div className="flex border-b mb-4">
 215 │                   <button
 216 │                     className={`px-4 py-2 ${activeTab === 'crop' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 217 │                     onClick={() => setActiveTab('crop')}
 218 │                   >
 219 │                     Crop
 220 │                   </button>
 221 │                   <button
 222 │                     className={`px-4 py-2 ${activeTab === 'filter' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 223 │                     onClick={() => setActiveTab('filter')}
 224 │                   >
 225 │                     Filter
 226 │                   </button>
 227 │                   <button
 228 │                     className={`px-4 py-2 ${activeTab === 'adjust' ? 'border-b-2 border-primary font-medium' : 'text-muted-foreground'}`}
 229 │                     onClick={() => setActiveTab('adjust')}
 230 │                   >
 231 │                     Adjust
 232 │                   </button>
 233 │                 </div>
 234 │ 
 235 │                 {/* Tab Content */}
 236 │                 <div className="space-y-6">
 237 │                   {/* Rotation Controls */}
 238 │                   <div className="flex justify-center gap-4 mb-6">
 239 │                     <button 
 240 │                       className="p-2 rounded-full hover:bg-muted"
 241 │                       onClick={() => setStraighten(Math.max(0, straighten - 5))}
 242 │                     >
 243 │                       <RotateCcw className="h-5 w-5" />
 244 │                     </button>
 245 │                     <button 
 246 │                       className="p-2 rounded-full hover:bg-muted"
 247 │                       onClick={() => setStraighten(Math.min(100, straighten + 5))}
 248 │                     >
 249 │                       <RotateCw className="h-5 w-5" />
 250 │                     </button>
 251 │                   </div>
 252 │ 
 253 │                   {/* Zoom Control */}
 254 │                   <div>
 255 │                     <p className="text-sm font-medium mb-2">Zoom</p>
 256 │                     <Slider 
 257 │                       value={[zoom]} 
 258 │                       onValueChange={(values) => setZoom(values[0])} 
 259 │                       min={25} 
 260 │                       max={150} 
 261 │                       step={1}
 262 │                     />
 263 │                   </div>
 264 │ 
 265 │                   {/* Straighten Control */}
 266 │                   <div>
 267 │                     <p className="text-sm font-medium mb-2">Straighten</p>
 268 │                     <Slider 
 269 │                       value={[straighten]} 
 270 │                       onValueChange={(values) => setStraighten(values[0])} 
 271 │                       min={0} 
 272 │                       max={100} 
 273 │                       step={1}
 274 │                     />
 275 │                   </div>
 276 │ 
 277 │                   {activeTab === 'adjust' && (
 278 │                     <>
 279 │                       {/* Brightness Control */}
 280 │                       <div>
 281 │                         <p className="text-sm font-medium mb-2">Brightness</p>
 282 │                         <Slider 
 283 │                           value={[brightness]} 
 284 │                           onValueChange={(values) => setBrightness(values[0])} 
 285 │                           min={0} 
 286 │                           max={100} 
 287 │                           step={1}
 288 │                         />
 289 │                       </div>
 290 │ 
 291 │                       {/* Contrast Control */}
 292 │                       <div>
 293 │                         <p className="text-sm font-medium mb-2">Contrast</p>
 294 │                         <Slider 
 295 │                           value={[contrast]} 
 296 │                           onValueChange={(values) => setContrast(values[0])} 
 297 │                           min={0} 
 298 │                           max={100} 
 299 │                           step={1}
 300 │                         />
 301 │                       </div>
 302 │                     </>
 303 │                   )}
 304 │ 
 305 │                   <div className="flex justify-between mt-6">
 306 │                     <Button variant="outline" onClick={onClose}>
 307 │                       Cancel
 308 │                     </Button>
 309 │                     <div className="flex items-center gap-2">
 310 │                       <Button variant="outline" onClick={() => setPreviewUrl(null)}>
 311 │                         <Eye className="h-4 w-4 mr-2" />
 312 │                         Anyone
 313 │                       </Button>
 314 │                       <Button onClick={handleSavePhoto} disabled={loading}>
 315 │                         {loading ? "Saving..." : "Save photo"}
 316 │                       </Button>
 317 │                     </div>
 318 │                   </div>
 319 │                 </div>
 320 │               </div>
 321 │             )}
 322 │           </div>
 323 │         </div>
 324 │       </div>
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
 332 │ import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
 333 │ import { Button } from "@/components/ui/button"
 334 │ import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
 335 │ import { Slider } from "@/components/ui/slider"
 336 │ import { createClient } from "@/lib/supabase"
 337 │ 
 338 │ interface ProfilePhotoModalProps {
 339 │   isOpen: boolean
 340 │   onClose: () => void
 341 │   userId: string
 342 │   avatarUrl: string | null
 343 │   name: string
 344 │   onAvatarUpdate: (url: string) => void
 345 │ }
 346 │ 
 347 │ export function ProfilePhotoModal({
     ·                 ────────┬────────
     ·                         ╰── `ProfilePhotoModal` redefined here
 348 │   isOpen,
 349 │   onClose,
 350 │   userId,
     ╰────

  × The "use client" directive must be placed before other expressions. Move it to the top of the file to resolve this issue.
     ╭─[/home/runner/workspace/app/components/profile-photo-modal.tsx:325:1]
 325 │     </div>
 326 │   )
 327 │ }
 328 │ "use client"
     · ────────────
 329 │ 
 330 │ import React, { useState } from "react"
 331 │ import { X } from "lucide-react"
     ╰────
This error occurred during the build process and can only be dismissed by fixing the error.